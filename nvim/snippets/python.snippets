## Control flow
# match
snippet match Pattern matching
	match ${1:expression}:
		case ${2:pattern_1}:
			${3:pass}
		case _:
			${0:pass}

## Class
# new-style class
snippet clai
	class ${1:class_name}:
		"""${2:description}"""
		def __init__(self, ${3:args}):
			${0}

## logging
# log
snippet log
	import logging

	log = logging.getLogger(__name__)
# basicConfig
snippet log_basic
	logging.basicConfig(level=logging.INFO, format="%(asctime)s %(name)s [%(levelname)s] - %(message)s")

snippet log_verbosity_get
	def get_logging_verbosity(verbosity: int = 0) -> int:
		"""Map an int into the range [0, 2] to a log level of increasing detail.
		"""
		return {
			0: logging.ERROR,
			1: logging.WARNING,
			2: logging.INFO,
			3: logging.DEBUG,
		}.get(verbosity, logging.DEBUG)


## Library-specific
# pydantic
snippet basemodel
	class ${1:class_name}(BaseModel):
		${0}

# typer
snippet typer
	import typer

	app = typer.Typer(no_args_is_help=True)

	if __name__ == "__main__":
		app()


snippet typer_cmd
	@app.command("${1:command_name}")
	def cmd_${2}():
		${0}

